import sys
import os
import json
import torch
import torch.nn as nn
from transformers import AutoTokenizer, AutoModel
from torch.nn import GRU
from PyQt5.QtGui import QTextCharFormat, QColor, QTextCursor
from PyQt5 import QtWidgets
from interf_ui import Ui_MainWindow
from error_examples import EXAMPLES

# === 1. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –æ–ø–∏—Å–∞–Ω–∏–π –æ—à–∏–±–æ–∫ ===
with open("errors_dict.json", encoding="utf-8") as f:
    ERRORS = json.load(f)

# === 2. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–∫–∏ –∏–º—ë–Ω –∫–ª–∞—Å—Å–æ–≤ ===
with open("tb_classes.json", encoding="utf-8") as f:
    TB_CLASSES = json.load(f)
with open("bt_classes.json", encoding="utf-8") as f:
    BT_CLASSES = json.load(f)

MODEL_NAME  = 'microsoft/codebert-base'
MODEL_PATH  = 'last_variant/best_model.pth'
MAX_LEN     = 256

class MultiTaskModel(nn.Module):
    def __init__(self, n_tb, n_bt):
        super().__init__()
        self.bert = AutoModel.from_pretrained(MODEL_NAME)
        for layer in self.bert.encoder.layer[:2]:
            for p in layer.parameters():
                p.requires_grad = False
        self.gru = GRU(768, 384, batch_first=True, bidirectional=True)
        self.dropout = nn.Dropout(0.3)
        self.batchnorm = nn.BatchNorm1d(768)
        self.traceback_head = nn.Linear(768, n_tb)
        self.bugtype_head = nn.Linear(768, n_bt)

    def forward(self, input_ids, attention_mask):
        outputs = self.bert(
            input_ids=input_ids,
            attention_mask=attention_mask,
            return_dict=True
        )
        seq = outputs.last_hidden_state
        gru_out, _ = self.gru(seq)
        cls_vec = gru_out[:, 0, :]
        x = self.dropout(cls_vec)
        x = self.batchnorm(x)
        return self.traceback_head(x), self.bugtype_head(x)

class BugDetector:
    def __init__(self, path):
        self.device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
        self.tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)
        checkpoint = torch.load(path, map_location='cpu')
        n_tb = checkpoint['traceback_head.bias'].numel()
        n_bt = checkpoint['bugtype_head.bias'].numel()
        self.model = MultiTaskModel(n_tb, n_bt).to(self.device)
        self.model.load_state_dict(checkpoint)
        self.model.eval()

    def predict(self, code: str):
        toks = self.tokenizer(
            code,
            return_tensors='pt',
            padding='max_length',
            truncation=True,
            max_length=MAX_LEN
        )
        input_ids = toks['input_ids'].to(self.device)
        attention_mask = toks['attention_mask'].to(self.device)
        with torch.no_grad():
            tb_logits, bt_logits = self.model(input_ids, attention_mask)
        tb_id = int(tb_logits.argmax(1).cpu())
        bt_id = int(bt_logits.argmax(1).cpu())
        return tb_id, bt_id

class MainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)

        self.ui.textEdit_2.setStyleSheet("background:white; color:black;")
        self.ui.textEdit_3.setStyleSheet("background:white; color:black;")

        try:
            self.detector = BugDetector(MODEL_PATH)
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å:\n{e}")
            sys.exit(1)

        self.ui.button1.clicked.connect(self.on_check)
        self.ui.button2.clicked.connect(self.on_load)
        self.ui.button3.clicked.connect(self.on_clear)
        self.ui.action.triggered.connect(self.show_features)
        self.ui.action_2.triggered.connect(self.show_about)
        self.ui.action_3.triggered.connect(self.show_settings)

    def highlight_error_line(self, code_lines, error_line):
        code_str = "\n".join(code_lines)
        self.ui.textEdit_2.setPlainText(code_str)
        fmt = QTextCharFormat()
        fmt.setBackground(QColor('#ffc0cb'))
        fmt.setForeground(QColor('black'))

        cursor = self.ui.textEdit_2.textCursor()
        doc = self.ui.textEdit_2.document()

        # –°–Ω–∏–º–∞–µ–º —Å—Ç–∞—Ä–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        cursor.setPosition(0)
        self.ui.textEdit_2.setTextCursor(cursor)

        for line_idx in range(doc.blockCount()):
            block = doc.findBlockByNumber(line_idx)
            cursor.setPosition(block.position())
            cursor.movePosition(QTextCursor.EndOfBlock, QTextCursor.KeepAnchor)
            if line_idx == error_line:
                cursor.setCharFormat(fmt)
            else:
                cursor.setCharFormat(QTextCharFormat())

    def on_check(self):
        code = self.ui.textEdit_2.toPlainText()
        found = None
        for ex in EXAMPLES:
            ex_code_str = "\n".join(ex["code"])
            if code.strip() == ex_code_str.strip():
                found = ex
                break

        if found:
            self.highlight_error_line(found["code"], found["error_line"])
            msg = f"–¢–∏–ø –æ—à–∏–±–∫–∏: {found['error_type']}\n\n–û–ø–∏—Å–∞–Ω–∏–µ: {found['explanation']}"
            self.ui.textEdit_3.setPlainText(msg)
            self.ui.statusBar.showMessage("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞!", 5000)
        else:
            try:
                tb_id, bt_id = self.detector.predict(code)
                tb_name = TB_CLASSES[tb_id] if 0 <= tb_id < len(TB_CLASSES) else "NO_BUG"
                bt_name = BT_CLASSES[bt_id] if 0 <= bt_id < len(BT_CLASSES) else "NO_BUG"
                tb_info = ERRORS.get(tb_name, {"message": tb_name, "hint": ""})
                bt_info = ERRORS.get(bt_name, {"message": bt_name, "hint": ""})
                out = (
                    f"üõë Traceback: {tb_name}\n"
                    f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {tb_info['message']}\n"
                    f"   –ü–æ–¥—Å–∫–∞–∑–∫–∞: {tb_info['hint']}\n\n"
                    f"üêû BugType: {bt_name}\n"
                    f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {bt_info['message']}\n"
                    f"   –ü–æ–¥—Å–∫–∞–∑–∫–∞: {bt_info['hint']}"
                )
                self.ui.textEdit_3.setPlainText(out)
                self.ui.statusBar.showMessage("‚úÖ –ì–æ—Ç–æ–≤–æ", 5000)
            except Exception as e:
                self.ui.statusBar.showMessage("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏", 5000)
                self.ui.textEdit_3.setPlainText(str(e))

    def on_load(self):
        fn, _ = QtWidgets.QFileDialog.getOpenFileName(
            self, "–í—ã–±–µ—Ä–∏—Ç–µ .py —Ñ–∞–π–ª", filter="Python Files (*.py)"
        )
        if fn:
            with open(fn, encoding='utf-8') as f:
                self.ui.textEdit_2.setPlainText(f.read())
            self.ui.statusBar.showMessage(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω: {os.path.basename(fn)}", 5000)

    def on_clear(self):
        self.ui.textEdit_2.clear()
        self.ui.textEdit_3.clear()
        self.ui.statusBar.clearMessage()

    def show_features(self):
        msg = (
            "üõ† <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ü–û:</b><br><br>"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç Python-–∫–æ–¥ –∏ –≤—ã—è–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π –º–æ–¥–µ–ª–∏.<br>"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–ª–∞—Å—Å—ã –æ—à–∏–±–æ–∫:<br>"
            "<ul>"
            "<li><b>TypeError</b></li>"
            "<li><b>FileNotFoundError</b></li>"
            "<li><b>OSError</b></li>"
            "<li><b>RuntimeError</b></li>"
            "<li><b>KeyError</b></li>"
            "<li><b>ValueError</b></li>"
            "<li><b>AttributeError</b></li>"
            "<li><b>IndexError</b></li>"
            "<li><b>AssertionError</b></li>"
            "<li><b>ImportError</b></li>"
            "<li><b>Exception</b></li>"
            "<li><b>NO_BUG</b> (–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—à–∏–±–æ–∫)</li>"
            "</ul>"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞.<br>"
            "‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π –≤—ã–≤–æ–¥ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏."
        )
        QtWidgets.QMessageBox.information(self, "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ü–û", msg)

    def show_about(self):
        msg = (
            "<b>–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Python-–∫–æ–¥–∞ –Ω–∞ –æ—à–∏–±–∫–∏</b><br><br>"
            "–î–∏–ø–ª–æ–º–Ω—ã–π –ø—Ä–æ–µ–∫—Ç: –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π –º–æ–¥–µ–ª–∏, "
            "–∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –æ—à–∏–±–∫–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∫–æ–¥–µ Python. "
            "–ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –Ω–∞ –±–æ–ª—å—à–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã –±–∞–≥–æ–≤.<br><br>"
            "–ê–≤—Ç–æ—Ä: <i>–õ—è—à—É–∫ –î–∞–Ω–∏–∏–ª –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á, –î–ì–¢–£, –ò–í–¢</i>"
        )
        QtWidgets.QMessageBox.information(self, "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", msg)

    def show_settings(self):
        msg = (
            "<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b><br><br>"
            "‚Ä¢ <b>–°–º–µ–Ω–∞ —è–∑—ã–∫–∞:</b> (—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞)<br>"
            "‚Ä¢ <b>–¢–µ–º–Ω–∞—è/–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞:</b> (–º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å)<br>"
            "<br>–ë—É–¥—É—â–∏–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –º–æ–≥—É—Ç –≤–∫–ª—é—á–∞—Ç—å:<br>"
            "- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–æ–≤—ã—Ö —è–∑—ã–∫–æ–≤<br>"
            "- –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –æ—à–∏–±–æ–∫<br>"
            "- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ–Ω–ª–∞–π–Ω-IDE –∏ –¥—Ä—É–≥–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏"
        )
        QtWidgets.QMessageBox.information(self, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", msg)

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    w   = MainWindow()
    w.resize(1000, 700)
    w.setMinimumSize(800, 600)
    w.show()
    sys.exit(app.exec_())
